def predict_text(model, hash_str, idx_to_char):
    """–î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ SHA-256 —Ö—ç—à–∞."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö—ç—à –≤ —á–∏—Å–ª–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä
    input_vector = np.array([ord(c) for c in hash_str]).reshape(1, -1)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
    prediction = model.predict(input_vector)[0]  # (MAX_SEQ_LENGTH, len(CHARACTER_SET))
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º one-hot –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –∏–Ω–¥–µ–∫—Å—ã —Å–∏–º–≤–æ–ª–æ–≤
    predicted_indices = np.argmax(prediction, axis=1)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Å–∏–º–≤–æ–ª—ã
    predicted_text = ''.join(idx_to_char[idx] for idx in predicted_indices)
    
    return predicted_text

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    test_text = generate_random_text()
    test_hash = sha256_hash(test_text)

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
    print(f"SHA-256 —Ö—ç—à: {test_hash}")

    predicted = predict_text(model, test_hash, idx_to_char)
    print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {predicted}")
